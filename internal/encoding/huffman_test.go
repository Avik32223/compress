package encoding

import (
	"reflect"
	"testing"
)

func TestHuffmanCode_Encode(t *testing.T) {
	type testCase struct {
		name    string
		source  string
		want    string
		wantErr bool
	}
	tests := []testCase{
		{
			name:    "Test 1",
			source:  "Has Anyone Really Been Far Even as Decided to Use Even Go Want to do Look More Like?",
			want:    "2\x01\x00\x00\x00\x00\x00\x00\r\xff\x81\x02\x01\x02\xff\x82\x00\x01\xff\x80\x00\x00\r\x7f\x04\x01\x02\xff\x80\x00\x01\f\x01\f\x00\x00\xfe\x01\x13\xff\x82\x00\x1c\x01\x01?\a1111000\x01\x01A\a1111001\x01\x01B\a1110010\x01\x01D\a1110101\x01\x01F\a1110011\x01\x01G\a1111110\x01\x01H\a1111100\x01\x01M\a1111101\x01\x01R\a1110110\x01\x01U\a1110111\x01\x01W\a1111111\x01\x01c\a1110100\x01\x01E\x06110110\x01\x01L\x06110111\x01\x01i\x0510110\x01\x01k\x0510111\x01\x01l\x06111101\x01\x01r\x0510100\x01\x01v\x0510101\x01\x01y\x06111000\x01\x01d\x0501010\x01\x01s\x0501011\x01\x01t\x0511010\x01\x01a\x040100\x01\x01n\x041100\x01\x01o\x03100\x01\x01e\x03011\x01\x01 \x0200`\x01\x00\x00\x00\x00\x00\x00\xf8\x8b<\xe7\x13\x19٧\xbe\xf0ro\x0eiCj\xbc\x11gW\xd2\xcaj5\x0e\xebf\xd5x~\x87\xf4\xcd\x1a\x82\xa1\xbc\x97>\xca3{]\xf8\x00",
			wantErr: false,
		},
		{
			name:    "Test 2",
			source:  "",
			want:    "",
			wantErr: false,
		},
		{
			name:    "Test 3",
			source:  "a quick brown fox jumps over a lazy dog.",
			want:    "\x0e\x01\x00\x00\x00\x00\x00\x00\r\xff\x81\x02\x01\x02\xff\x82\x00\x01\xff\x80\x00\x00\r\x7f\x04\x01\x02\xff\x80\x00\x01\f\x01\f\x00\x00\xff\xf0\xff\x82\x00\x1a\x01\x01.\x06111100\x01\x01b\x06111101\x01\x01c\x0500100\x01\x01d\x0501100\x01\x01e\x0500101\x01\x01f\x06111001\x01\x01g\x0501101\x01\x01i\x06011110\x01\x01j\x0500110\x01\x01k\x0500011\x01\x01l\x0501010\x01\x01m\x0501011\x01\x01n\x0501000\x01\x01p\x0501001\x01\x01q\x06011111\x01\x01s\x0501110\x01\x01v\x0500111\x01\x01w\x0500010\x01\x01x\x06111010\x01\x01y\x06111011\x01\x01z\x06111000\x01\x01r\x040000\x01\x01u\x0511111\x01\x01a\x041100\x01\x01o\x041101\x01\x01 \x0210\xaf\x00\x00\x00\x00\x00\x00\x00\xc9\xff\xbcAކ\x89\x17;\xd4o\xad.\xb4\xe5\v%g\x1d\xcc\xd6\xf8",
			wantErr: false,
		},
		{
			name:    "Test 4",
			source:  "Avik",
			want:    "9\x00\x00\x00\x00\x00\x00\x00\r\xff\x81\x02\x01\x02\xff\x82\x00\x01\xff\x80\x00\x00\r\x7f\x04\x01\x02\xff\x80\x00\x01\f\x01\f\x00\x00\x1c\xff\x82\x00\x04\x01\x01A\x0200\x01\x01i\x0211\x01\x01k\x0210\x01\x01v\x0201\b\x00\x00\x00\x00\x00\x00\x00\x1e\x00",
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			h := &HuffmanCode{}
			got, err := h.Encode(tt.source)
			if (err != nil) != tt.wantErr {
				t.Errorf("HuffmanCode.Encode() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(string(got), tt.want) {
				t.Errorf("HuffmanCode.Encode() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestHuffmanCode_Decode(t *testing.T) {
	type testCase struct {
		name        string
		encodedText string
		want        string
		wantErr     bool
	}
	tests := []testCase{
		{
			name:        "Test 1",
			encodedText: "2\x01\x00\x00\x00\x00\x00\x00\r\xff\x81\x02\x01\x02\xff\x82\x00\x01\xff\x80\x00\x00\r\x7f\x04\x01\x02\xff\x80\x00\x01\f\x01\f\x00\x00\xfe\x01\x13\xff\x82\x00\x1c\x01\x01?\a1111000\x01\x01A\a1111001\x01\x01B\a1110010\x01\x01D\a1110101\x01\x01F\a1110011\x01\x01G\a1111110\x01\x01H\a1111100\x01\x01M\a1111101\x01\x01R\a1110110\x01\x01U\a1110111\x01\x01W\a1111111\x01\x01c\a1110100\x01\x01E\x06110110\x01\x01L\x06110111\x01\x01i\x0510110\x01\x01k\x0510111\x01\x01l\x06111101\x01\x01r\x0510100\x01\x01v\x0510101\x01\x01y\x06111000\x01\x01d\x0501010\x01\x01s\x0501011\x01\x01t\x0511010\x01\x01a\x040100\x01\x01n\x041100\x01\x01o\x03100\x01\x01e\x03011\x01\x01 \x0200`\x01\x00\x00\x00\x00\x00\x00\xf8\x8b<\xe7\x13\x19٧\xbe\xf0ro\x0eiCj\xbc\x11gW\xd2\xcaj5\x0e\xebf\xd5x~\x87\xf4\xcd\x1a\x82\xa1\xbc\x97>\xca3{]\xf8\x00",
			want:        "Has Anyone Really Been Far Even as Decided to Use Even Go Want to do Look More Like?",
			wantErr:     false,
		},
		{
			name:        "Test 2",
			encodedText: "",
			want:        "",
			wantErr:     false,
		},
		{
			name:        "Test 3",
			encodedText: "\x0e\x01\x00\x00\x00\x00\x00\x00\r\xff\x81\x02\x01\x02\xff\x82\x00\x01\xff\x80\x00\x00\r\x7f\x04\x01\x02\xff\x80\x00\x01\f\x01\f\x00\x00\xff\xf0\xff\x82\x00\x1a\x01\x01.\x06111100\x01\x01b\x06111101\x01\x01c\x0500100\x01\x01d\x0501100\x01\x01e\x0500101\x01\x01f\x06111001\x01\x01g\x0501101\x01\x01i\x06011110\x01\x01j\x0500110\x01\x01k\x0500011\x01\x01l\x0501010\x01\x01m\x0501011\x01\x01n\x0501000\x01\x01p\x0501001\x01\x01q\x06011111\x01\x01s\x0501110\x01\x01v\x0500111\x01\x01w\x0500010\x01\x01x\x06111010\x01\x01y\x06111011\x01\x01z\x06111000\x01\x01r\x040000\x01\x01u\x0511111\x01\x01a\x041100\x01\x01o\x041101\x01\x01 \x0210\xaf\x00\x00\x00\x00\x00\x00\x00\xc9\xff\xbcAކ\x89\x17;\xd4o\xad.\xb4\xe5\v%g\x1d\xcc\xd6\xf8",
			want:        "a quick brown fox jumps over a lazy dog.",
			wantErr:     false,
		},
		{
			name:        "Test 4",
			encodedText: "9\x00\x00\x00\x00\x00\x00\x00\r\xff\x81\x02\x01\x02\xff\x82\x00\x01\xff\x80\x00\x00\r\x7f\x04\x01\x02\xff\x80\x00\x01\f\x01\f\x00\x00\x1c\xff\x82\x00\x04\x01\x01A\x0200\x01\x01i\x0211\x01\x01k\x0210\x01\x01v\x0201\b\x00\x00\x00\x00\x00\x00\x00\x1e\x00",
			want:        "Avik",
			wantErr:     false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			h := &HuffmanCode{}
			got, err := h.Decode(tt.encodedText)
			if (err != nil) != tt.wantErr {
				t.Errorf("HuffmanCode.Decode() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(string(got), tt.want) {
				t.Errorf("HuffmanCode.Decode() = %v, want %v", string(got), tt.want)
			}
		})
	}
}
